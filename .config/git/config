# -*- Conf -*-
[apply]
    whitespace = nowarn
[branch]
    autosetuprebase = always
[log]
    # date = short
    date = relative
[format]
        pretty = '%C(yellow)%h%Creset %C(magenta)%cd%Creset %d %s'
[github]
    user = mydavoodeh
[gitlab]
    user = mydavoodeh
[user]
    name = M. Yas. Davoodeh
    email = MYDavoodeh@gmail.com
[status]
    showUntrackedFiles = all
[credential]
    helper = cache --timeout 86400
[color]
    ui = true
    branch = auto
    showbranch = auto
    diff = auto
    interactive = true
    status = true

# color.branch.<slot>
    # Use customized color for branch coloration.  <slot> is one of current (the current branch), local
    # (a local branch), remote (a remote-tracking branch in refs/remotes/), plain (other refs).

    # The value for these configuration variables is a list of colors (at most two) and attributes (at
    # most one), separated by spaces. The colors accepted are:
    #   normal, black, red, green, yellow, blue, magenta, cyan and white;
    # the attributes are:
    #   bold, dim, ul, blink and reverse.

    # The first color given is the foreground; the second is the background.
    # The position of the attribute, if any, doesn't matter.

#[color "branch"]
    # current = yellow reverse
    # local = yellow
    # remote = green

# color.diff.<slot>
    # Use customized color for diff colorization.  <slot> specifies which part of the patch to use the
    # specified color, and is one of plain (context text), meta (metainformation), frag (hunk header),
    # func (function in hunk header), old (removed lines), new (added lines), commit (commit headers),
    # or whitespace (highlighting whitespace errors). The values of these variables may be specified as
    # in color.branch.<slot>.

#[color "diff"]
    # meta = yellow bold
    # frag = magenta bold
    # old = red bold
    # new = green bold

# color.decorate.<slot>
    # Use customized color for git log --decorate output.  <slot> is one of branch, remoteBranch, tag,
    # stash or HEAD for local branches, remote-tracking branches, tags, stash and HEAD, respectively.

# color.interactive.<slot>
    # Use customized color for git add --interactive output.  <slot> may be prompt, header, help or
    # error, for four distinct types of normal output from interactive commands. The values of these
    # variables may be specified as in color.branch.<slot>.

# color.status.<slot>
    # Use customized color for status colorization.  <slot> is one of header (the header text of the
    # status message), added or updated (files which are added but not committed), changed (files which
    # are changed but not added in the index), untracked (files which are not tracked by git), branch
    # (the current branch), or nobranch (the color the no branch warning is shown in, defaulting to
    # red). The values of these variables may be specified as in color.branch.<slot>.

#[color "status"]
    # added = yellow
    # changed = green
    # untracked = cyan

[http]
    #proxy = socks5://localhost:9150
[core]
    editor = nvim
[merge]
    tool = nvim
    conflictstyle = diff3
[mergetool]
    prompt = true
[mergetool "nvim"]
    cmd = "nvim -d \"$MERGED\""
[diff]
    tool = nvimdiff
[difftool]
    prompt = true
[difftool "nvimdiff"]
    cmd = "nvim -d \"$LOCAL\" \"$REMOTE\""
[color "diff-highlight"]
    oldNormal = red bold
    oldHighlight = red bold 52
    newNormal = green bold
    newHighlight = green bold 22
[color "diff"]
    meta = 11
    frag = magenta bold
    commit = yellow bold
    old = red bold
    new = green bold
    whitespace = red reverse
[alias]
    a   = add
    aa  = add --al
    apa = add --patch
    au  = add --updat
    av  = add --verbos
    ap  = appl

    b   = branch
    ba  = branch -a
    bd  = branch -d
    bD  = branch -D
    bl  = blame -b -w
    bnm = branch --no-merged
    br  = branch --remote
    bs  = bisect
    bsb = bisect bad
    bsg = bisect good
    bsr = bisect reset
    bss = bisect start

    c  = commit -v
    cc  = commit -v
    cf  = commit -v --amend
    cnf = commit -v --no-edit --amend
    ca  = commit -v -a
    caf = commit -v -a --amend
    canf= commit -v -a --no-edit --amend
    cansf=commit -v -a -s --no-edit --amend
    cam = commit -a -m
    csm = commit -s -m
    cb  = checkout -b
    cf  = config --list
    cl  = clone --recurse-submodules
    clean=clean -id
    pristine = reset --hard && git clean -dfx
    cm  = checkout master
    cd  = checkout develop
    cmsg= commit -m
    co  = checkout
    count=shortlog -sn
    cp  = cherry-pick
    cpa = cherry-pick --abort
    cpc = cherry-pick --continue
    cs  = commit -S

    d   = diff
    dca = diff --cached
    dcw = diff --cached --word-diff
    dct = describe --tags $(git rev-list --tags --max-count=1)
    ds  = diff --staged
    dt  = diff-tree --no-commit-id --name-only -r
    dw  = diff --word-diff

    f   = fetch
    fa  = fetch --all --prune
    fo  = fetch origin

    fg  = ls-files | grep

    g   = gui citool
    ga  = gui citool --amend

    gpull=pull origin "$(git_current_branch)"
    gpush=push origin "$(git_current_branch)"

    gsup= branch --set-upstream-to=origin/$(git_current_branch)
    psup= push --set-upstream origin $(git_current_branch)

    h   = ! gh
    hc  = ! gh repo clone
    hcl = ! gh repo clone
    hv  = ! gh repo view
    hw  = ! gh repo view -w
    hr  = "! f(){ curl -SLO https://raw.githubusercontent.com/$1/${3:-master}/$2 ;} ; f"
    hro = "! f(){ curl -SL https://raw.githubusercontent.com/$1/${3:-master}/$2 ;} ; f"
    hrcl= ! gh repo clone
    hrv = ! gh repo view
    hrw = ! gh repo view -w
    hh  = help

    ignore  = update-index --assume-unchanged
    ignored = ! git ls-files -v | grep '^h' | cut -c3-

    l   = pull
    lg  = log --stat
    lgp = log --stat -p
    lgg = log --graph
    lgga= log --graph --decorate --all
    lgm = log --graph --max-count=10
    lo  = log --oneline --decorate
    lol = log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'
    lols= log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --stat
    lod = log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset'
    lods= log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset' --date=short
    lola= log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --all
    log = log --oneline --decorate --graph
    loga= log --oneline --decorate --graph --all

    m   = merge
    mom = merge origin/master
    mt  = mergetool --no-prompt
    mtvim=mergetool --no-prompt --tool=vimdiff
    mum = merge upstream/master
    ma  = merge --abort

    p   = push
    pa  = push origin --all
    pd  = push --dry-run
    pf  = push --force-with-lease
    pff = push --force
    poat= push origin --all && git push origin --tags
    pu  = push upstream
    pv  = push -v

    r   = remote
    ra  = remote add
    rb  = rebase
    rba = rebase --abort
    rbc = rebase --continue
    rbd = rebase develop
    rbi = rebase -i
    rbm = rebase master
    rbs = rebase --skip
    rev = revert
    rh  = reset
    rhh = reset --hard
    roh = reset origin/$(git_current_branch) --hard
    rm  = rm
    rmc = rm --cached
    rmv = remote rename
    rrm = remote remove
    rs  = restore
    rset= remote set-url
    rss = restore --source
    ru  = reset --
    rup = remote update
    rv  = remote -v

    sb  = status -sb
    sd  = svn dcommit
    sh  = show
    si  = submodule init
    sps = show --pretty=short --show-signature
    ss  = status -s
    s   = status
    st  = status

    staa= stash apply
    stc = stash clear
    std = stash drop
    stl = stash list
    stp = stash pop
    sts = stash show --text
    stall=stash --all
    su  = submodule updat
    sw  = switc
    swc = switch -c

    ts  = tag -
    tv  = tag | sort -

    unignore = update-index --no-assume-unchanged
    up  = pull --rebas
    upv = pull --rebase -v
    upa = pull --rebase --autostash
    upav= pull --rebase --autostash -v
    lum = pull upstream master

    wch='git whatchanged -p --abbrev-commit --pretty=medium'
    # prefab = cherry -v origin/fabrication

[filter "lfs"]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true
[rerere]
    enabled = true
[remote]
    pushDefault = origin
